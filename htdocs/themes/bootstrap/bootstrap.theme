<?php
/**
 * @file
 * The primary PHP file for the Drupal Bootstrap base theme.
 *
 * This file should only contain light helper functions and point to stubs in
 * other files containing more complex functions.
 *
 * The stubs should point to files within the `./includes` folder named after
 * the function itself minus the theme prefix. If the stub contains a group of
 * functions, then please organize them so they are related in some way and name
 * the file appropriately to at least hint at what it contains.
 *
 * All [pre]process functions, theme functions and template files lives inside
 * the `./templates` folder. This is a highly automated and complex system
 * designed to only load the necessary files when a given theme hook is invoked.
 *
 * Visit this project's official documentation site, http://drupal-bootstrap.org
 * or the markdown files inside the `./docs` folder.
 *
 * @see bootstrap_theme()
 * @see \Drupal\bootstrap\Registry
 */

use Drupal\bootstrap\Bootstrap;
use Drupal\image\Entity\ImageStyle;

/**
 * Initialize the active theme.
 */
Bootstrap::initialize();

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\ElementInfo::alter()
 */
function bootstrap_element_info_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Theme::alter()
 */
function bootstrap_form_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Form\SystemThemeSettings::alterForm()
 */
function bootstrap_form_system_theme_settings_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\LibraryInfo::alter()
 */
function bootstrap_library_info_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\PageAttachments::alter()
 */
function bootstrap_page_attachments_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Bootstrap::preprocess()
 */
function bootstrap_preprocess(&$variables, $hook, $info) {
  Bootstrap::preprocess($variables, $hook, $info);
  switch ($hook) {
    case 'page':
      _bootstrap_preprocess_page($variables, $hook, $info);
    case 'html':
      _bootstrap_preprocess_html($variables, $hook, $info);
    break;
  }
}

// Bootstrap Change
function _bootstrap_preprocess_page(&$variables, $hook, $info) {

  $header = array('#theme' => 'header');
  $variables['header'] = drupal_render($header);

  $footer = array('#theme' => 'footer');
  $variables['footer'] = drupal_render($footer);

}

function _bootstrap_preprocess_html(&$variables, $hook, $info) {
}

function bootstrap_preprocess_header(&$variables, $hook, $info) {
  $search_form = \Drupal::formBuilder()->getForm('Drupal\site\Form\SearchForm');
  $variables['search_form'] = drupal_render($search_form);

  $menu_tree = \Drupal::menuTree();
  $menu_name = 'main';

  // Build the typical default set of menu tree parameters.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

  // Load the tree based on this set of parameters.
  $tree = $menu_tree->load($menu_name, $parameters);

  // Transform the tree using the manipulators you want.
  $manipulators = array(
    // Only show links that are accessible for the current user.
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    // Use the default sorting of menu links.
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);

  // Finally, build a renderable array from the transformed tree.
  $menu = $menu_tree->build($tree);

  $menu_html = drupal_render($menu);

  $variables['menu'] = $menu_html;
}


function bootstrap_preprocess_footer(&$variables, $hook, $info) {
  $search_form = \Drupal::formBuilder()->getForm('Drupal\site\Form\SearchForm');
  $variables['search_form'] = drupal_render($search_form);
}

function bootstrap_preprocess_landing(&$variables) {

  $slides = array();
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'project')
    ->sort('created', 'desc');

  $nids = $query->execute();
  foreach ($nids as $nid) {
    $slide = array();
    $node = node_load($nid);

    // title
    $slide['title'] = $node->getTitle();

    // hero
    $hero = $node->get('field_hero')->getValue();
    $file = file_load($hero[0]['target_id']);
    $path = $file->getFileUri();
    $slide['hero'] = ImageStyle::load('widescreen_large')->buildUrl($path);

    // logo
    $hero = $node->get('field_logo')->getValue();
    $file = file_load($hero[0]['target_id']);
    $path = $file->getFileUri();
    $slide['logo'] = ImageStyle::load('medium')->buildUrl($path);

    // description
    $body = $node->get('body')->getValue();
    $slide['description'] = $body[0]['summary'];

    // legal
    $legal = $node->get('field_legal')->getValue();
    $slide['legal'] = $legal[0]['value'];

    // version
    $version = $node->get('field_version')->getValue();
    $slide['version'] = db_query("SELECT name FROM {taxonomy_term_field_data} WHERE tid = :tid", array(':tid' => $version[0]['target_id']))->fetchField();

    // url
    $url = $node->get('field_url')->getValue();
    $slide['url'] = $url[0]['uri'];

    $slide['path'] = 'node/' . $node->id();

    $slides[] = $slide;
  }

  $variables['slides'] = $slides;

  $variables['view_snippet'] = views_embed_view('snippet_landing', 'block_1');

  $variables['bio_summary'] = 'todo';

}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Bootstrap::getInfo()
 */
function bootstrap_theme() {
  return Bootstrap::getThemeHooks();
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\ThemeRegistry::alter()
 *
 * @todo Remove once a proper replacement for the theme.registry service can be
 * created in a bootstrap_core sub-module.
 */
function bootstrap_theme_registry_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\ThemeSuggestions::alter()
 */
function bootstrap_theme_suggestions_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}
