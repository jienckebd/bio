<?php

use Drupal\Core\Language\LanguageManagerInterface;
use Drupal\Core\Url;

/**
 * @file
 * The primary PHP file for the Drupal Bootstrap base theme.
 *
 * This file should only contain light helper functions and point to stubs in
 * other files containing more complex functions.
 *
 * The stubs should point to files within the `./includes` folder named after
 * the function itself minus the theme prefix. If the stub contains a group of
 * functions, then please organize them so they are related in some way and name
 * the file appropriately to at least hint at what it contains.
 *
 * All [pre]process functions, theme functions and template files lives inside
 * the `./templates` folder. This is a highly automated and complex system
 * designed to only load the necessary files when a given theme hook is invoked.
 *
 * Visit this project's official documentation site, http://drupal-bootstrap.org
 * or the markdown files inside the `./docs` folder.
 *
 * @see bootstrap_theme()
 * @see \Drupal\bootstrap\Registry
 */

use Drupal\bootstrap\Bootstrap;
use Drupal\image\Entity\ImageStyle;
use Drupal\contacts\Entity\Contact;

/**
 * Initialize the active theme.
 */
Bootstrap::initialize();

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\ElementInfo::alter()
 */
function bootstrap_element_info_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Theme::alter()
 */
function bootstrap_form_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Form\SystemThemeSettings::alterForm()
 */
function bootstrap_form_system_theme_settings_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\LibraryInfo::alter()
 */
function bootstrap_library_info_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\PageAttachments::alter()
 */
function bootstrap_page_attachments_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Bootstrap::preprocess()
 */
function bootstrap_preprocess(&$variables, $hook, $info) {
  Bootstrap::preprocess($variables, $hook, $info);
  switch ($hook) {
    case 'page':
      _bootstrap_preprocess_page($variables, $hook, $info);
    case 'html':
      _bootstrap_preprocess_html($variables, $hook, $info);
    break;
  }
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Bootstrap::getInfo()
 */
function bootstrap_theme() {
  return Bootstrap::getThemeHooks();
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\ThemeRegistry::alter()
 *
 * @todo Remove once a proper replacement for the theme.registry service can be
 * created in a bootstrap_core sub-module.
 */
function bootstrap_theme_registry_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

/**
 * {@inheritdoc}
 *
 * @see \Drupal\bootstrap\Plugin\Alter\ThemeSuggestions::alter()
 */
function bootstrap_theme_suggestions_alter(&$data, &$context1 = NULL, &$context2 = NULL) {
  Bootstrap::alter(__FUNCTION__, $data, $context1, $context2);
}

// Bootstrap Change
function _bootstrap_preprocess_page(&$variables, $hook, $info) {

  $header = array('#theme' => 'header');
  $variables['header'] = drupal_render($header);

  $footer = array('#theme' => 'footer');
  $variables['footer'] = drupal_render($footer);

  global $heading_subtitle;
  if (empty($heading_subtitle)) {
    $variables['heading_subtitle'] = $heading_subtitle;
  }

}

function _bootstrap_preprocess_html(&$variables, $hook, $info) {
}

function bootstrap_preprocess_header(&$variables, $hook, $info) {
  $search_form = \Drupal::formBuilder()->getForm('Drupal\search\Form\SearchBlockForm');
  $variables['search_form'] = drupal_render($search_form);

  $menu_tree = \Drupal::menuTree();
  $menu_name = 'main';

  // Build the typical default set of menu tree parameters.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

  // Load the tree based on this set of parameters.
  $tree = $menu_tree->load($menu_name, $parameters);

  // Transform the tree using the manipulators you want.
  $manipulators = array(
    // Only show links that are accessible for the current user.
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    // Use the default sorting of menu links.
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);

  // Finally, build a renderable array from the transformed tree.
  $menu = $menu_tree->build($tree);

  $menu_html = drupal_render($menu);

  $variables['menu'] = $menu_html;

  // languages
  $languageManager = \Drupal::languageManager();
  $links = $languageManager->getLanguageSwitchLinks('language_interface', Url::fromRoute('<current>'));

  $language_links = $build = array(
    '#theme' => 'links__language_block',
    '#links' => $links->links,
    '#attributes' => array(
      'class' => array(
        "language-switcher-{$links->method_id}",
      ),
    ),
    '#set_active_class' => TRUE,
  );

  $current_language_id = \Drupal::languageManager()->getCurrentLanguage()->getId();
  unset($language_links['#links'][$current_language_id]);

  $variables['language_links'] = drupal_render($language_links);
  $variables['current_language'] = t(\Drupal::languageManager()->getCurrentLanguage()->getName());
}


function bootstrap_preprocess_footer(&$variables, $hook, $info) {
  $search_form = \Drupal::formBuilder()->getForm('Drupal\site\Form\SearchForm');
  $variables['search_form'] = drupal_render($search_form);

  $menu_tree = \Drupal::menuTree();
  $menu_name = 'main';

  // Build the typical default set of menu tree parameters.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

  // Load the tree based on this set of parameters.
  $tree = $menu_tree->load($menu_name, $parameters);

  // Transform the tree using the manipulators you want.
  $manipulators = array(
    // Only show links that are accessible for the current user.
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    // Use the default sorting of menu links.
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);

  // Finally, build a renderable array from the transformed tree.
  $menu = $menu_tree->build($tree);

  $menu_html = drupal_render($menu);

  $variables['menu'] = $menu_html;

  $variables['year'] = date('Y');

}

function bootstrap_preprocess_landing(&$variables) {

  $slides = array();
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('promote', 1)
    ->condition('type', 'project')
    ->sort('created', 'desc');

  $nids = $query->execute();
  foreach ($nids as $nid) {
    $slide = array();
    $node = node_load($nid);

    $node = \Drupal::entityManager()->getTranslationFromContext($node);

    // title
    $slide['title'] = $node->getTitle();

    // hero
    $hero = $node->get('field_hero')->getValue();
    $file = file_load($hero[0]['target_id']);
    $path = $file->getFileUri();
    $slide['hero'] = ImageStyle::load('widescreen_large')->buildUrl($path);

    // logo
    $hero = $node->get('field_logo')->getValue();
    $file = file_load($hero[0]['target_id']);
    $path = $file->getFileUri();
    $slide['logo'] = ImageStyle::load('medium')->buildUrl($path);

    // description
    $body = $node->get('body')->getValue();
    $slide['description'] = $body[0]['summary'];

    // legal
    $legal = $node->get('field_legal')->getValue();
    $slide['legal'] = $legal[0]['value'];

    // version
    $version = $node->get('field_version')->getValue();
    $slide['version'] = db_query("SELECT name FROM {taxonomy_term_field_data} WHERE tid = :tid", array(':tid' => $version[0]['target_id']))->fetchField();

    // url
    $url = $node->get('field_url')->getValue();
    $slide['url'] = $url[0]['uri'];

    $node_path = $node->urlInfo()
    ->setOption('language', $language)
    ->setAbsolute()
    ->toString();

    $slide['path'] = $node_path;

    $slides[] = $slide;
  }

  $variables['slides'] = $slides;

  $variables['view_snippet'] = views_embed_view('snippet_landing', 'block_1');

  $variables['bio_summary'] = 'todo';

  $variables['block_summary_of_me'] = site_build_block_content(1);

}

function bootstrap_preprocess_about(&$variables) {
  $variables['block_summary_of_me'] = site_build_block_content(1);
}

function bootstrap_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];

  $node_path = $node->urlInfo()
    ->setOption('language', $language)
    ->setAbsolute()
    ->toString();

  $variables['url'] = $node_path;

  $node = $variables['node'];

  if ($node->bundle() == 'project') {

    $images = $node->get('field_images')->getValue();
    $slides = array();

    foreach ($images as $key => $image) {
      $slide = array();
      if (is_numeric($image['target_id'])) {
        $file = file_load($image['target_id']);
        $path = $file->getFileUri();
        $slide['image_thumbnail'] = ImageStyle::load('widescreen_small')->buildUrl($path);
        $slide['image_full'] = ImageStyle::load('gallery_full')->buildUrl($path);
        $slide['title'] = $image['title'];
        $slide['url'] = $image['alt'];
        $slides[] = $slide;
      }
    }
    $variables['slides'] = $slides;

    $hero = $node->get('field_logo')->getValue();
    $file = file_load($hero[0]['target_id']);
    $path = $file->getFileUri();

    $variables['logo'] = ImageStyle::load('medium')->buildUrl($path);

    $version = $node->get('field_version')->getValue();
    $variables['version'] = db_query("SELECT name FROM {taxonomy_term_field_data} WHERE tid = :tid", array(':tid' => $version[0]['target_id']))->fetchField();

    $url = $node->get('field_url')->getValue();
    $variables['site_url'] = $url[0]['uri'];
    $variables['nid'] = $node->id();

  }
  elseif ($node->bundle() == 'snippet') {

    $field_refs = $node->get('field_url_x')->getValue();
    $refs = array();

    foreach ($field_refs as $key => $data) {
      $refs[] = array('uri' => $data['uri'], 'title' => $data['title'], 'key' => $key);
    }

    if (!empty($refs)) {
      $variables['refs'] = $refs;
    }

    $code = $node->get('field_code')->getValue();
    $code_parts = array();

    foreach ($code as $key => $data) {
      if (!empty($data['value'])) {
        $summary = $data['summary'];
        if (fnmatch('*[ref:*]*', $data['description'])) {
          $key_from_summary = between('[ref:', ']', $data['description']);
          $search = '[ref:' . $key_from_summary . ']';
          $ref_num = $key_from_summary;
          $replace = 'Ref ' . $ref_num . ': ' . $refs[$key_from_summary - 1]['title'];
          $data['description'] = str_replace($search, $replace, $data['description']);
        }
        $data['key'] = $key;
        $code_parts[] = $data;
      }
    }

    $variables['code_parts'] = $code_parts;

    $variables['created'] = format_date($node->getCreatedTime(), 'custom', 'd M Y');

  }
}

function bootstrap_preprocess_xml_sitemap(&$variables) {
  $records = array();

  $paths = array('/landing', '/contact', '/snippet', '/project');

  foreach ($paths as $path) {
    $record = array();
    $record['loc'] = $path;
    $record['lastmod'] = format_date(REQUEST_TIME, NULL, 'Y-m-d');
    $record['priority'] = '1.0';
    $record['changefreq'] = 'monthly';
    $records[] = $record;
  }

  $results = db_query("SELECT * FROM {node_field_data} WHERE type = :type1 OR type = :type2", array(':type1' => 'snippet', ':type2' => 'project'));
  foreach ($results as $result) {

    $alias = db_query("SELECT alias FROM {url_alias} WHERE source = :source", array(':source' => '/node/' . $result->nid))->fetchField();

    $record = array();
    $record['loc'] = !empty($alias) ? $alias : '/node/' . $result->nid;
    $record['lastmod'] = format_date($result->changed, NULL, 'Y-m-d');
    $record['priority'] = '1.0';
    $record['changefreq'] = 'monthly';
    $records[] = $record;
  }

  $variables['records'] = $records;
}

function bootstrap_preprocess_listing(&$variables) {

  $listing = site_listing_data($variables['type']);

  if ($variables['type'] == 'project') {
    $view_name = 'project_listing';
    $block_id = 'exposedformproject_listingpage_1';
    $subtitle = $listing['subtitle'];
  }
  elseif ($variables['type'] == 'snippet') {
    $view_name = 'snippet_listing';
    $block_id = 'exposedformsnippet_listingpage_1';
    $subtitle = $listing['subtitle'];
  }

  global $heading_subtitle;
  $heading_subtitle = $subtitle;

  $block = \Drupal\block\Entity\Block::load($block_id);
  $block_content = \Drupal::entityManager()
  ->getViewBuilder('block')
  ->view($block);

  $variables['subtitle'] = $subtitle;
  $variables['view_facets'] = drupal_render($block_content);
  $variables['view_body'] = views_embed_view($view_name, 'page_1');

}

function bootstrap_preprocess_contact(&$variables) {

    $default_form = \Drupal::config('contact.settings')->get('add_form');
    $entity = \Drupal::entityManager()->getStorage('contact')->load($default_form);

    $message = \Drupal::entityManager()
      ->getStorage('contact')
      ->create(array(
        'langcode' => 'en',
      ));

    $contact_form = \Drupal::service('entity.form_builder')->getForm($message);


  $variables['form'] = drupal_render($contact_form);
}
